{"uid":"194f21bb56a8983f","name":"5.分页查询-第二页","fullName":"testcase.Single.UserManagement.test_user_find.TestUserManager#test_search_user","historyId":"b5b153d94f173826c22afd28bb857f6f","time":{"start":1749917017011,"stop":1749917017104,"duration":93},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <testcase.Single.UserManagement.test_user_find.TestUserManager object at 0x00000248EB435910>\nbase_info = {'api_name': '搜索用户', 'header': {'Authorization': '${get_extract_data(authorization)}', 'Content-Type': 'application/json'}, 'method': 'post', 'url': '/ssm_web/user/findAllUserByPage'}\ntestcase = {'json': {'currentPage': 2, 'pageSize': 10, 'username': '15588886234'}}\n\n    @allure.story(next(c_id) + \"搜索用户\")\n    # @pytest.mark.run(order=2)\n    @pytest.mark.parametrize('base_info,testcase', get_testcase_yaml(\"./testcase/Single/UserManagement/user_search_data.yaml\"))\n    def test_search_user(self, base_info, testcase):\n        allure.dynamic.title(testcase['case_name'])\n>       RequestBase().specification_yaml(base_info, testcase)\n\ntestcase\\Single\\UserManagement\\test_user_find.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\apiutil.py:186: in specification_yaml\n    raise e\nbase\\apiutil.py:165: in specification_yaml\n    self.asserts.assert_result(validation, res_json, status_code)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.assertions.Assertions object at 0x00000248EB31FDA0>\nexpected = [{'contains': {'message': '响应成功'}}, {'contains': {'status_code': 200}}, {'contains': {'success': True}}, {'contains': {'content.pageNum': 2}}, {'contains': {'content.pageSize': 10}}, {'contains': {'content.isFirstPage': False}}, ...]\nresponse = {'content': {'endRow': 0, 'firstPage': 1, 'hasNextPage': False, 'hasPreviousPage': True, ...}, 'message': '响应成功', 'state': 200, 'success': True}\nstatus_code = 200\n\n    def assert_result(self, expected, response, status_code):\n        \"\"\"\n        断言，通过断言all_flag标记，all_flag==0表示测试通过，否则为失败\n        :param expected: 预期结果\n        :param response: 实际响应结果\n        :param status_code: 响应code码\n        :return:\n        \"\"\"\n        all_flag = 0\n        try:\n            logs.info(\"yaml文件预期结果：%s\" % expected)\n            # logs.info(\"实际结果：%s\" % response)\n            # all_flag = 0\n            for yq in expected:\n                for key, value in yq.items():\n                    if key == \"contains\":\n                        flag = self.contains_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == \"eq\":\n                        flag = self.equal_assert(value, response)\n                        all_flag = all_flag + flag\n                    elif key == 'ne':\n                        flag = self.not_equal_assert(value, response)\n                        all_flag = all_flag + flag\n                    elif key == 'rv':\n                        flag = self.assert_response_any(actual_results=response, expected_results=value)\n                        all_flag = all_flag + flag\n                    elif key == 'db':\n                        flag = self.mysql_assert(value)\n                        all_flag = all_flag + flag\n                    elif key == 'eq_db':\n                        flag = self.equal_mysql_assert(value)\n                        all_flag = all_flag + flag\n                    else:\n                        logs.error(\"不支持此种断言方式\")\n    \n        except Exception as exceptions:\n            logs.error('接口断言异常，请检查yaml预期结果值是否正确填写!')\n            raise exceptions\n    \n        if all_flag == 0:\n            logs.info(\"测试成功\")\n            assert True\n        else:\n            logs.error(\"测试失败\")\n>           assert False\nE           AssertionError\n\ncommon\\assertions.py:343: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"clear_extract","time":{"start":1749917005347,"stop":1749917005347,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false},{"name":"setup_fixture","time":{"start":1749917005347,"stop":1749917005347,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false},{"name":"datadb_init","time":{"start":1749917005348,"stop":1749917005348,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false},{"name":"system_login","time":{"start":1749917005348,"stop":1749917005466,"duration":118},"status":"passed","steps":[],"attachments":[{"uid":"400ba851db468f47","name":"接口名称：用户登录","source":"400ba851db468f47.txt","type":"text/plain","size":12},{"uid":"feec088331b078c","name":"接口地址：http://47.113.145.175:8080/ssm_web/user/login","source":"feec088331b078c.txt","type":"text/plain","size":12},{"uid":"65ea064fe9a87c37","name":"请求方法：POST","source":"65ea064fe9a87c37.txt","type":"text/plain","size":12},{"uid":"f952c8f1a9a85909","name":"测试用例名称：登录成功","source":"f952c8f1a9a85909.txt","type":"text/plain","size":12},{"uid":"dfc623aa51862117","name":"请求参数","source":"dfc623aa51862117.txt","type":"text/plain","size":58},{"uid":"e846fa88ecf97b84","name":"接口响应信息","source":"e846fa88ecf97b84.txt","type":"text/plain","size":675}],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":6,"hasContent":true},{"name":"start_test_and_end","time":{"start":1749917017011,"stop":1749917017011,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <testcase.Single.UserManagement.test_user_find.TestUserManager object at 0x00000248EB435910>\nbase_info = {'api_name': '搜索用户', 'header': {'Authorization': '${get_extract_data(authorization)}', 'Content-Type': 'application/json'}, 'method': 'post', 'url': '/ssm_web/user/findAllUserByPage'}\ntestcase = {'json': {'currentPage': 2, 'pageSize': 10, 'username': '15588886234'}}\n\n    @allure.story(next(c_id) + \"搜索用户\")\n    # @pytest.mark.run(order=2)\n    @pytest.mark.parametrize('base_info,testcase', get_testcase_yaml(\"./testcase/Single/UserManagement/user_search_data.yaml\"))\n    def test_search_user(self, base_info, testcase):\n        allure.dynamic.title(testcase['case_name'])\n>       RequestBase().specification_yaml(base_info, testcase)\n\ntestcase\\Single\\UserManagement\\test_user_find.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\apiutil.py:186: in specification_yaml\n    raise e\nbase\\apiutil.py:165: in specification_yaml\n    self.asserts.assert_result(validation, res_json, status_code)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.assertions.Assertions object at 0x00000248EB31FDA0>\nexpected = [{'contains': {'message': '响应成功'}}, {'contains': {'status_code': 200}}, {'contains': {'success': True}}, {'contains': {'content.pageNum': 2}}, {'contains': {'content.pageSize': 10}}, {'contains': {'content.isFirstPage': False}}, ...]\nresponse = {'content': {'endRow': 0, 'firstPage': 1, 'hasNextPage': False, 'hasPreviousPage': True, ...}, 'message': '响应成功', 'state': 200, 'success': True}\nstatus_code = 200\n\n    def assert_result(self, expected, response, status_code):\n        \"\"\"\n        断言，通过断言all_flag标记，all_flag==0表示测试通过，否则为失败\n        :param expected: 预期结果\n        :param response: 实际响应结果\n        :param status_code: 响应code码\n        :return:\n        \"\"\"\n        all_flag = 0\n        try:\n            logs.info(\"yaml文件预期结果：%s\" % expected)\n            # logs.info(\"实际结果：%s\" % response)\n            # all_flag = 0\n            for yq in expected:\n                for key, value in yq.items():\n                    if key == \"contains\":\n                        flag = self.contains_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == \"eq\":\n                        flag = self.equal_assert(value, response)\n                        all_flag = all_flag + flag\n                    elif key == 'ne':\n                        flag = self.not_equal_assert(value, response)\n                        all_flag = all_flag + flag\n                    elif key == 'rv':\n                        flag = self.assert_response_any(actual_results=response, expected_results=value)\n                        all_flag = all_flag + flag\n                    elif key == 'db':\n                        flag = self.mysql_assert(value)\n                        all_flag = all_flag + flag\n                    elif key == 'eq_db':\n                        flag = self.equal_mysql_assert(value)\n                        all_flag = all_flag + flag\n                    else:\n                        logs.error(\"不支持此种断言方式\")\n    \n        except Exception as exceptions:\n            logs.error('接口断言异常，请检查yaml预期结果值是否正确填写!')\n            raise exceptions\n    \n        if all_flag == 0:\n            logs.info(\"测试成功\")\n            assert True\n        else:\n            logs.error(\"测试失败\")\n>           assert False\nE           AssertionError\n\ncommon\\assertions.py:343: AssertionError","steps":[],"attachments":[{"uid":"33918f742e20d84b","name":"接口名称：搜索用户","source":"33918f742e20d84b.txt","type":"text/plain","size":12},{"uid":"cdeb359d0d6c32e1","name":"接口地址：http://47.113.145.175:8080/ssm_web/user/findAllUserByPage","source":"cdeb359d0d6c32e1.txt","type":"text/plain","size":12},{"uid":"2d8668ad131e9234","name":"请求方法：post","source":"2d8668ad131e9234.txt","type":"text/plain","size":12},{"uid":"5e0b8b4460fc2716","name":"请求头：{'Content-Type': 'application/json', 'Authorization': '17161eb6-61ea-4449-b731-d078dadb83fa'}","source":"5e0b8b4460fc2716.txt","type":"text/plain","size":12},{"uid":"48867ca7e141dc90","name":"测试用例名称：5.分页查询-第二页","source":"48867ca7e141dc90.txt","type":"text/plain","size":12},{"uid":"f6517a667e19c042","name":"请求参数","source":"f6517a667e19c042.txt","type":"text/plain","size":71},{"uid":"90c8363c1e291e95","name":"接口响应信息","source":"90c8363c1e291e95.txt","type":"text/plain","size":586},{"uid":"c06d45ce2ff91b8f","name":"JSONPath匹配失败","source":"c06d45ce2ff91b8f.txt","type":"text/plain","size":48},{"uid":"43dbc136ac54497a","name":"log","source":"43dbc136ac54497a.txt","type":"text/plain","size":2627}],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":9,"hasContent":true},"afterStages":[{"name":"start_test_and_end::0","time":{"start":1749917017125,"stop":1749917017126,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false},{"name":"setup_fixture::0","time":{"start":1749917018394,"stop":1749917018394,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"M03_用户管理"},{"name":"story","value":"C04_搜索用户"},{"name":"parentSuite","value":"testcase.Single.UserManagement"},{"name":"suite","value":"test_user_find"},{"name":"subSuite","value":"TestUserManager"},{"name":"host","value":"SQG"},{"name":"thread","value":"16436-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.Single.UserManagement.test_user_find"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_info","value":"{'api_name': '搜索用户', 'url': '/ssm_web/user/findAllUserByPage', 'method': 'post', 'header': {'Content-Type': 'application/json', 'Authorization': '${get_extract_data(authorization)}'}}"},{"name":"testcase","value":"{'case_name': '5.分页查询-第二页', 'json': {'currentPage': 2, 'pageSize': 10, 'username': '15588886234'}, 'validation': [{'contains': {'message': '响应成功'}}, {'contains': {'status_code': 200}}, {'contains': {'success': True}}, {'contains': {'content.pageNum': 2}}, {'contains': {'content.pageSize': 10}}, {'contains': {'content.isFirstPage': False}}, {'contains': {'content.hasPreviousPage': True}}, {'contains': {'content.list[0].name': '15588886234'}}]}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"194f21bb56a8983f.json","parameterValues":["{'api_name': '搜索用户', 'url': '/ssm_web/user/findAllUserByPage', 'method': 'post', 'header': {'Content-Type': 'application/json', 'Authorization': '${get_extract_data(authorization)}'}}","{'case_name': '5.分页查询-第二页', 'json': {'currentPage': 2, 'pageSize': 10, 'username': '15588886234'}, 'validation': [{'contains': {'message': '响应成功'}}, {'contains': {'status_code': 200}}, {'contains': {'success': True}}, {'contains': {'content.pageNum': 2}}, {'contains': {'content.pageSize': 10}}, {'contains': {'content.isFirstPage': False}}, {'contains': {'content.hasPreviousPage': True}}, {'contains': {'content.list[0].name': '15588886234'}}]}"]}