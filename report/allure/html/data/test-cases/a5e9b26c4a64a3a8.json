{"uid":"a5e9b26c4a64a3a8","name":"5.查询用户权限-无权限用户","fullName":"testcase.Business Scenario.test_user_permissions.TestUserManager#test_user_permissions","historyId":"b2f519ee3bd7feb5b365093df1d2e042","time":{"start":1750810830626,"stop":1750810830782,"duration":156},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n..\\..\\Pyproject\\testProject\\venv\\Lib\\site-packages\\requests\\models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\seeki\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Users\\seeki\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001C323AB5790>\ns = '<!doctype html><html lang=\"en\"><head><title>HTTP Status 500 – Internal Server Error</title><style type=\"text/css\">bod...e of the root cause is available in the server logs.</p><hr class=\"line\" /><h3>Apache Tomcat/8.5.63</h3></body></html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\seeki\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_user_permissions.TestUserManager object at 0x000001C359039130>\ncase_info = {'baseInfo': {'api_name': '查询用户权限', 'header': {'Authorization': '${get_extract_data(token_null)}', 'Content-Type': 'ap..._extract_data(cookie_null)}'}, 'method': 'get', 'url': '/ssm_web/user/getUserPermissions'}, 'testCase': [{'json': {}}]}\n\n    @allure.story(next(c_id) + \"查询用户权限（业务场景）\")\n    @pytest.mark.run(order=4)\n    @pytest.mark.parametrize('case_info', get_testcase_yaml(\"./testcase/Business Scenario/user_permissions_data.yaml\"))\n    def test_user_permissions(self, case_info):\n        allure.dynamic.title(case_info['testCase'][0]['case_name'])\n>       RequestBase().specification_yaml(case_info)\n\ntestcase\\Business Scenario\\test_user_permissions.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\apiutil_business.py:149: in specification_yaml\n    raise e\nbase\\apiutil_business.py:124: in specification_yaml\n    allure.attach(self.allure_attach_response(res.json()), '接口响应信息', allure.attachment_type.TEXT)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\Pyproject\\testProject\\venv\\Lib\\site-packages\\requests\\models.py:978: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"clear_extract","time":{"start":1750810825739,"stop":1750810825739,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"setup_fixture","time":{"start":1750810825739,"stop":1750810825739,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"datadb_init","time":{"start":1750810825739,"stop":1750810825739,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"system_login","time":{"start":1750810825739,"stop":1750810825861,"duration":122},"status":"passed","steps":[],"attachments":[{"uid":"4e5c8babd28f3853","name":"接口名称：用户登录","source":"4e5c8babd28f3853.txt","type":"text/plain","size":12},{"uid":"c9747c718cba19fe","name":"接口地址：http://47.115.225.121:8080/ssm_web/user/login","source":"c9747c718cba19fe.txt","type":"text/plain","size":12},{"uid":"e2885d4dc61c91c7","name":"请求方法：POST","source":"e2885d4dc61c91c7.txt","type":"text/plain","size":12},{"uid":"a3e14cb2742d9620","name":"请求头：{}","source":"a3e14cb2742d9620.txt","type":"text/plain","size":12},{"uid":"f2c9d4d85a586e33","name":"测试用例名称：登录成功","source":"f2c9d4d85a586e33.txt","type":"text/plain","size":12},{"uid":"bbe308b8e527aa08","name":"请求参数","source":"bbe308b8e527aa08.txt","type":"text/plain","size":58},{"uid":"9088e3eb7c12fd9c","name":"接口响应信息","source":"9088e3eb7c12fd9c.txt","type":"text/plain","size":675},{"uid":"7f227e425289ffa0","name":"响应文本断言结果：成功","source":"7f227e425289ffa0.txt","type":"text/plain","size":62},{"uid":"fae76b796458234d","name":"响应代码断言结果:成功","source":"fae76b796458234d.txt","type":"text/plain","size":37}],"parameters":[],"attachmentsCount":9,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"start_test_and_end","time":{"start":1750810830626,"stop":1750810830626,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n..\\..\\Pyproject\\testProject\\venv\\Lib\\site-packages\\requests\\models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\seeki\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Users\\seeki\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001C323AB5790>\ns = '<!doctype html><html lang=\"en\"><head><title>HTTP Status 500 – Internal Server Error</title><style type=\"text/css\">bod...e of the root cause is available in the server logs.</p><hr class=\"line\" /><h3>Apache Tomcat/8.5.63</h3></body></html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\seeki\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_user_permissions.TestUserManager object at 0x000001C359039130>\ncase_info = {'baseInfo': {'api_name': '查询用户权限', 'header': {'Authorization': '${get_extract_data(token_null)}', 'Content-Type': 'ap..._extract_data(cookie_null)}'}, 'method': 'get', 'url': '/ssm_web/user/getUserPermissions'}, 'testCase': [{'json': {}}]}\n\n    @allure.story(next(c_id) + \"查询用户权限（业务场景）\")\n    @pytest.mark.run(order=4)\n    @pytest.mark.parametrize('case_info', get_testcase_yaml(\"./testcase/Business Scenario/user_permissions_data.yaml\"))\n    def test_user_permissions(self, case_info):\n        allure.dynamic.title(case_info['testCase'][0]['case_name'])\n>       RequestBase().specification_yaml(case_info)\n\ntestcase\\Business Scenario\\test_user_permissions.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\apiutil_business.py:149: in specification_yaml\n    raise e\nbase\\apiutil_business.py:124: in specification_yaml\n    allure.attach(self.allure_attach_response(res.json()), '接口响应信息', allure.attachment_type.TEXT)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\Pyproject\\testProject\\venv\\Lib\\site-packages\\requests\\models.py:978: JSONDecodeError","steps":[],"attachments":[{"uid":"ace63c279ee44882","name":"接口地址：http://47.115.225.121:8080/ssm_web/user/getUserPermissions","source":"ace63c279ee44882.attach","type":"text/plain","size":58},{"uid":"62dadbb81d6cb64d","name":"接口名：查询用户权限","source":"62dadbb81d6cb64d.attach","type":"text/plain","size":18},{"uid":"6ecb4a4cdef5d6a4","name":"请求方法：get","source":"6ecb4a4cdef5d6a4.attach","type":"text/plain","size":3},{"uid":"fdc6e0686e674533","name":"请求头：{'Content-Type': 'application/json', 'Authorization': '360b0d16-6a5f-455d-9dce-deeef295227d', 'Cookie': 'JSESSIONID=FB8C210F458410F05834BCEA8416DB31'}","source":"fdc6e0686e674533.txt","type":"text/plain","size":18},{"uid":"7cdea6a788bd9cd7","name":"请求头信息","source":"7cdea6a788bd9cd7.txt","type":"text/plain","size":150},{"uid":"d65a2a7804147b3","name":"测试用例名称：5.查询用户权限-无权限用户","source":"d65a2a7804147b3.txt","type":"text/plain","size":36},{"uid":"ef70839f20babc38","name":"请求参数","source":"ef70839f20babc38.txt","type":"text/plain","size":12},{"uid":"502b3025512e422f","name":"接口响应信息","source":"502b3025512e422f.txt","type":"text/plain","size":13964},{"uid":"ada99b87b9768e1d","name":"log","source":"ada99b87b9768e1d.txt","type":"text/plain","size":14942}],"parameters":[],"attachmentsCount":9,"shouldDisplayMessage":true,"attachmentStep":false,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"start_test_and_end::0","time":{"start":1750810830816,"stop":1750810830816,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"setup_fixture::0","time":{"start":1750810846938,"stop":1750810846938,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"story","value":"C02_查询用户权限（业务场景）"},{"name":"feature","value":"M02_用户管理（业务场景）"},{"name":"tag","value":"run(order=4)"},{"name":"tag","value":"api_scenario"},{"name":"tag","value":"user_management"},{"name":"parentSuite","value":"testcase.Business Scenario"},{"name":"suite","value":"test_user_permissions"},{"name":"subSuite","value":"TestUserManager"},{"name":"host","value":"SQG"},{"name":"thread","value":"19160-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.Business Scenario.test_user_permissions"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case_info","value":"{'baseInfo': {'api_name': '查询用户权限', 'url': '/ssm_web/user/getUserPermissions', 'method': 'get', 'header': {'Content-Type': 'application/json', 'Authorization': '${get_extract_data(token_null)}', 'Cookie': '${get_extract_data(cookie_null)}'}}, 'testCase': [{'case_name': '5.查询用户权限-无权限用户', 'json': {}, 'validation': [{'eq': {'status_code': 200}}, {'eq_db': {'${get_extract_data(resourceId_null)}': []}}], 'extract_list': {'resourceId_null': '$..resourceList[*].id'}}]}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":["api_scenario","run(order=4)","user_management"]},"source":"a5e9b26c4a64a3a8.json","parameterValues":["{'baseInfo': {'api_name': '查询用户权限', 'url': '/ssm_web/user/getUserPermissions', 'method': 'get', 'header': {'Content-Type': 'application/json', 'Authorization': '${get_extract_data(token_null)}', 'Cookie': '${get_extract_data(cookie_null)}'}}, 'testCase': [{'case_name': '5.查询用户权限-无权限用户', 'json': {}, 'validation': [{'eq': {'status_code': 200}}, {'eq_db': {'${get_extract_data(resourceId_null)}': []}}], 'extract_list': {'resourceId_null': '$..resourceList[*].id'}}]}"]}