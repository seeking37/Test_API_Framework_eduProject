{"uid":"e020e1c0e08ec3e0","name":"5.分页查询-第二页","fullName":"testcase.Single.UserManagement.test_user_find.TestUserManager#test_search_user","historyId":"b5b153d94f173826c22afd28bb857f6f","time":{"start":1749971005620,"stop":1749971005716,"duration":96},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <testcase.Single.UserManagement.test_user_find.TestUserManager object at 0x0000020DF9291B80>\nbase_info = {'api_name': '搜索用户', 'header': {'Authorization': '${get_extract_data(authorization)}', 'Content-Type': 'application/json'}, 'method': 'post', 'url': '/ssm_web/user/findAllUserByPage'}\ntestcase = {'json': {'currentPage': 2, 'pageSize': 10, 'username': '15588886234'}}\n\n    @allure.story(next(c_id) + \"搜索用户\")\n    @pytest.mark.run(order=3)\n    @pytest.mark.parametrize('base_info,testcase', get_testcase_yaml(\"./testcase/Single/UserManagement/user_search_data.yaml\"))\n    def test_search_user(self, base_info, testcase):\n        allure.dynamic.title(testcase['case_name'])\n>       RequestBase().specification_yaml(base_info, testcase)\n\ntestcase\\Single\\UserManagement\\test_user_find.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\apiutil.py:188: in specification_yaml\n    raise e\nbase\\apiutil.py:167: in specification_yaml\n    self.asserts.assert_result(validation, res_json, status_code)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.assertions.Assertions object at 0x0000020DF748BEF0>\nexpected = [{'contains': {'message': '响应成功'}}, {'eq': {'status_code': 200}}, {'eq': {'success': True}}, {'eq': {'content.pageNum': 2}}, {'eq': {'content.pageSize': 10}}, {'eq': {'content.isFirstPage': False}}, ...]\nresponse = {'content': {'endRow': 0, 'firstPage': 1, 'hasNextPage': False, 'hasPreviousPage': True, ...}, 'message': '响应成功', 'state': 200, 'success': True}\nstatus_code = 200\n\n    def assert_result(self, expected, response, status_code):\n        \"\"\"\n        断言，通过断言all_flag标记，all_flag==0表示测试通过，否则为失败\n        :param expected: 预期结果\n        :param response: 实际响应结果\n        :param status_code: 响应code码\n        :return:\n        \"\"\"\n        all_flag = 0\n        try:\n            logs.info(\"yaml文件预期结果：%s\" % expected)\n            # logs.info(\"实际结果：%s\" % response)\n            # all_flag = 0\n            for yq in expected:\n                for key, value in yq.items():\n                    if key == \"contains\":\n                        flag = self.contains_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == \"eq\":\n                        flag = self.equal_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == 'ne':\n                        flag = self.not_equal_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == 'rv':\n                        flag = self.assert_response_any(actual_results=response, expected_results=value)\n                        all_flag = all_flag + flag\n                    elif key == 'eq_db':\n                        flag = self.equal_mysql_assert(value)\n                        all_flag = all_flag + flag\n                    else:\n                        logs.error(\"不支持此种断言方式\")\n    \n        except Exception as exceptions:\n            logs.error('接口断言异常，请检查yaml预期结果值是否正确填写!')\n            raise exceptions\n    \n        if all_flag == 0:\n            logs.info(\"测试成功\")\n            assert True\n        else:\n            logs.error(\"测试失败\")\n>           assert False\nE           AssertionError\n\ncommon\\assertions.py:330: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"datadb_init","time":{"start":1749971003772,"stop":1749971003772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0},{"name":"setup_fixture","time":{"start":1749971003772,"stop":1749971003772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0},{"name":"clear_extract","time":{"start":1749971003772,"stop":1749971003772,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0},{"name":"system_login","time":{"start":1749971003772,"stop":1749971003875,"duration":103},"status":"passed","steps":[],"attachments":[{"uid":"bd9d9cf30c25925a","name":"接口名称：用户登录","source":"bd9d9cf30c25925a.txt","type":"text/plain","size":12},{"uid":"95b98cf478b9ec55","name":"接口地址：http://47.113.145.175:8080/ssm_web/user/login","source":"95b98cf478b9ec55.txt","type":"text/plain","size":12},{"uid":"f25defd964bce442","name":"请求方法：POST","source":"f25defd964bce442.txt","type":"text/plain","size":12},{"uid":"f1d1b55ee87495ee","name":"测试用例名称：登录成功","source":"f1d1b55ee87495ee.txt","type":"text/plain","size":12},{"uid":"bf2bc07eca2d9412","name":"请求参数","source":"bf2bc07eca2d9412.txt","type":"text/plain","size":58},{"uid":"da3be6e69eb61208","name":"接口响应信息","source":"da3be6e69eb61208.txt","type":"text/plain","size":675},{"uid":"286782feffd5c84e","name":"响应文本断言结果：成功","source":"286782feffd5c84e.txt","type":"text/plain","size":62},{"uid":"c1167869b2a2b562","name":"响应代码断言结果:成功","source":"c1167869b2a2b562.txt","type":"text/plain","size":37}],"parameters":[],"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":8,"attachmentStep":false,"stepsCount":0},{"name":"start_test_and_end","time":{"start":1749971005619,"stop":1749971005619,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <testcase.Single.UserManagement.test_user_find.TestUserManager object at 0x0000020DF9291B80>\nbase_info = {'api_name': '搜索用户', 'header': {'Authorization': '${get_extract_data(authorization)}', 'Content-Type': 'application/json'}, 'method': 'post', 'url': '/ssm_web/user/findAllUserByPage'}\ntestcase = {'json': {'currentPage': 2, 'pageSize': 10, 'username': '15588886234'}}\n\n    @allure.story(next(c_id) + \"搜索用户\")\n    @pytest.mark.run(order=3)\n    @pytest.mark.parametrize('base_info,testcase', get_testcase_yaml(\"./testcase/Single/UserManagement/user_search_data.yaml\"))\n    def test_search_user(self, base_info, testcase):\n        allure.dynamic.title(testcase['case_name'])\n>       RequestBase().specification_yaml(base_info, testcase)\n\ntestcase\\Single\\UserManagement\\test_user_find.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\apiutil.py:188: in specification_yaml\n    raise e\nbase\\apiutil.py:167: in specification_yaml\n    self.asserts.assert_result(validation, res_json, status_code)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.assertions.Assertions object at 0x0000020DF748BEF0>\nexpected = [{'contains': {'message': '响应成功'}}, {'eq': {'status_code': 200}}, {'eq': {'success': True}}, {'eq': {'content.pageNum': 2}}, {'eq': {'content.pageSize': 10}}, {'eq': {'content.isFirstPage': False}}, ...]\nresponse = {'content': {'endRow': 0, 'firstPage': 1, 'hasNextPage': False, 'hasPreviousPage': True, ...}, 'message': '响应成功', 'state': 200, 'success': True}\nstatus_code = 200\n\n    def assert_result(self, expected, response, status_code):\n        \"\"\"\n        断言，通过断言all_flag标记，all_flag==0表示测试通过，否则为失败\n        :param expected: 预期结果\n        :param response: 实际响应结果\n        :param status_code: 响应code码\n        :return:\n        \"\"\"\n        all_flag = 0\n        try:\n            logs.info(\"yaml文件预期结果：%s\" % expected)\n            # logs.info(\"实际结果：%s\" % response)\n            # all_flag = 0\n            for yq in expected:\n                for key, value in yq.items():\n                    if key == \"contains\":\n                        flag = self.contains_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == \"eq\":\n                        flag = self.equal_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == 'ne':\n                        flag = self.not_equal_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == 'rv':\n                        flag = self.assert_response_any(actual_results=response, expected_results=value)\n                        all_flag = all_flag + flag\n                    elif key == 'eq_db':\n                        flag = self.equal_mysql_assert(value)\n                        all_flag = all_flag + flag\n                    else:\n                        logs.error(\"不支持此种断言方式\")\n    \n        except Exception as exceptions:\n            logs.error('接口断言异常，请检查yaml预期结果值是否正确填写!')\n            raise exceptions\n    \n        if all_flag == 0:\n            logs.info(\"测试成功\")\n            assert True\n        else:\n            logs.error(\"测试失败\")\n>           assert False\nE           AssertionError\n\ncommon\\assertions.py:330: AssertionError","steps":[],"attachments":[{"uid":"e73cf1d85a5db136","name":"接口名称：搜索用户","source":"e73cf1d85a5db136.txt","type":"text/plain","size":12},{"uid":"e2af675fd1f8c9c","name":"接口地址：http://47.113.145.175:8080/ssm_web/user/findAllUserByPage","source":"e2af675fd1f8c9c.txt","type":"text/plain","size":12},{"uid":"c2d77cc696ffe2f1","name":"请求方法：post","source":"c2d77cc696ffe2f1.txt","type":"text/plain","size":12},{"uid":"e830c42de61bfbf7","name":"请求头：{'Content-Type': 'application/json', 'Authorization': 'None'}","source":"e830c42de61bfbf7.txt","type":"text/plain","size":12},{"uid":"b0aaa727727c5151","name":"测试用例名称：5.分页查询-第二页","source":"b0aaa727727c5151.txt","type":"text/plain","size":12},{"uid":"f6ea50bc5b36aaf3","name":"请求参数","source":"f6ea50bc5b36aaf3.txt","type":"text/plain","size":71},{"uid":"36b67204af679e0d","name":"接口响应信息","source":"36b67204af679e0d.txt","type":"text/plain","size":586},{"uid":"33d399eeb098123","name":"响应文本断言结果：成功","source":"33d399eeb098123.txt","type":"text/plain","size":62},{"uid":"dadfcf92ee5230dd","name":"响应代码断言结果:成功","source":"dadfcf92ee5230dd.txt","type":"text/plain","size":37},{"uid":"ca7baac5a905c0be","name":"相等断言结果：成功","source":"ca7baac5a905c0be.txt","type":"text/plain","size":51},{"uid":"5a465854b711f791","name":"相等断言结果：成功","source":"5a465854b711f791.txt","type":"text/plain","size":53},{"uid":"7484569c335625c6","name":"相等断言结果：成功","source":"7484569c335625c6.txt","type":"text/plain","size":56},{"uid":"6c4dff02949c7bcf","name":"相等断言结果：成功","source":"6c4dff02949c7bcf.txt","type":"text/plain","size":65},{"uid":"35d233d1dc44aa82","name":"相等断言结果：成功","source":"35d233d1dc44aa82.txt","type":"text/plain","size":67},{"uid":"3a52e3a5836e6a7e","name":"相等断言失败","source":"3a52e3a5836e6a7e.txt","type":"text/plain","size":50},{"uid":"355de81ec5532728","name":"log","source":"355de81ec5532728.txt","type":"text/plain","size":2827}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":16,"attachmentStep":false,"stepsCount":0},"afterStages":[{"name":"start_test_and_end::0","time":{"start":1749971005897,"stop":1749971005897,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0},{"name":"setup_fixture::0","time":{"start":1749971017723,"stop":1749971017723,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"story","value":"C04_搜索用户"},{"name":"feature","value":"M03_用户管理"},{"name":"tag","value":"run(order=3)"},{"name":"parentSuite","value":"testcase.Single.UserManagement"},{"name":"suite","value":"test_user_find"},{"name":"subSuite","value":"TestUserManager"},{"name":"host","value":"SQG"},{"name":"thread","value":"27516-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.Single.UserManagement.test_user_find"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_info","value":"{'api_name': '搜索用户', 'url': '/ssm_web/user/findAllUserByPage', 'method': 'post', 'header': {'Content-Type': 'application/json', 'Authorization': '${get_extract_data(authorization)}'}}"},{"name":"testcase","value":"{'case_name': '5.分页查询-第二页', 'json': {'currentPage': 2, 'pageSize': 10, 'username': '15588886234'}, 'validation': [{'contains': {'message': '响应成功'}}, {'eq': {'status_code': 200}}, {'eq': {'success': True}}, {'eq': {'content.pageNum': 2}}, {'eq': {'content.pageSize': 10}}, {'eq': {'content.isFirstPage': False}}, {'eq': {'content.hasPreviousPage': True}}, {'eq': {'content.list[0].name': '15588886234'}}]}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["run(order=3)"]},"source":"e020e1c0e08ec3e0.json","parameterValues":["{'api_name': '搜索用户', 'url': '/ssm_web/user/findAllUserByPage', 'method': 'post', 'header': {'Content-Type': 'application/json', 'Authorization': '${get_extract_data(authorization)}'}}","{'case_name': '5.分页查询-第二页', 'json': {'currentPage': 2, 'pageSize': 10, 'username': '15588886234'}, 'validation': [{'contains': {'message': '响应成功'}}, {'eq': {'status_code': 200}}, {'eq': {'success': True}}, {'eq': {'content.pageNum': 2}}, {'eq': {'content.pageSize': 10}}, {'eq': {'content.isFirstPage': False}}, {'eq': {'content.hasPreviousPage': True}}, {'eq': {'content.list[0].name': '15588886234'}}]}"]}