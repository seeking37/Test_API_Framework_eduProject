{"uid":"e0b2a3287cadbeb2","name":"5.分页查询-第二页","fullName":"testcase.Single.UserManagement.test_user_find.TestUserManager#test_search_user","historyId":"2ab6530b4a234f8ac390ee00465fcc48","time":{"start":1750810827758,"stop":1750810827876,"duration":118},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <testcase.Single.UserManagement.test_user_find.TestUserManager object at 0x000001C35902E090>\nbase_info = {'api_name': '搜索用户', 'header': {'Authorization': '${get_extract_data(token)}', 'Content-Type': 'application/json'}, 'method': 'post', 'url': '/ssm_web/user/findAllUserByPage'}\ntestcase = {'json': {'currentPage': 2, 'pageSize': 10, 'username': '15588886234'}}\n\n    @allure.story(next(c_id) + \"搜索用户\")\n    @pytest.mark.run(order=3)\n    @pytest.mark.parametrize('base_info,testcase', get_testcase_yaml(\"./testcase/Single/UserManagement/user_search_data.yaml\"))\n    def test_search_user(self, base_info, testcase):\n        allure.dynamic.title(testcase['case_name'])\n>       RequestBase().specification_yaml(base_info, testcase)\n\ntestcase\\Single\\UserManagement\\test_user_find.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\apiutil.py:193: in specification_yaml\n    raise e\nbase\\apiutil.py:172: in specification_yaml\n    self.asserts.assert_result(validation, res_json, status_code)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.assertions.Assertions object at 0x000001C35927CE60>\nexpected = [{'contains': {'message': '响应成功'}}, {'eq': {'status_code': 200}}, {'eq': {'success': True}}, {'eq': {'content.pageNum': 2}}, {'eq': {'content.pageSize': 10}}, {'eq': {'content.isFirstPage': False}}, ...]\nresponse = {'content': {'endRow': 0, 'firstPage': 1, 'hasNextPage': False, 'hasPreviousPage': True, ...}, 'message': '响应成功', 'state': 200, 'success': True}\nstatus_code = 200\n\n    def assert_result(self, expected, response, status_code):\n        \"\"\"\n        断言，通过断言all_flag标记，all_flag==0表示测试通过，否则为失败\n        :param expected: 预期结果\n        :param response: 实际响应结果\n        :param status_code: 响应code码\n        :return:\n        \"\"\"\n        all_flag = 0\n        try:\n            logs.info(\"yaml文件预期结果：%s\" % expected)\n            # logs.info(\"实际结果：%s\" % response)\n            # all_flag = 0\n            for yq in expected:\n                for key, value in yq.items():\n                    if key == \"contains\":\n                        flag = self.contains_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == \"eq\":\n                        flag = self.equal_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == 'neq':\n                        flag = self.not_equal_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == 'eq_db':\n                        flag = self.equal_mysql_assert(value)\n                        all_flag = all_flag + flag\n                    else:\n                        logs.error(\"不支持此种断言方式\")\n    \n        except Exception as exceptions:\n            logs.error('接口断言异常，请检查yaml预期结果值是否正确填写!')\n            raise exceptions\n    \n        if all_flag == 0:\n            logs.info(\"测试成功\")\n            assert True\n        else:\n            logs.error(\"测试失败\")\n>           assert False\nE           AssertionError\n\ncommon\\assertions.py:326: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"clear_extract","time":{"start":1750810825739,"stop":1750810825739,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"datadb_init","time":{"start":1750810825739,"stop":1750810825739,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"setup_fixture","time":{"start":1750810825739,"stop":1750810825739,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"system_login","time":{"start":1750810825739,"stop":1750810825861,"duration":122},"status":"passed","steps":[],"attachments":[{"uid":"4e5c8babd28f3853","name":"接口名称：用户登录","source":"4e5c8babd28f3853.txt","type":"text/plain","size":12},{"uid":"c9747c718cba19fe","name":"接口地址：http://47.115.225.121:8080/ssm_web/user/login","source":"c9747c718cba19fe.txt","type":"text/plain","size":12},{"uid":"e2885d4dc61c91c7","name":"请求方法：POST","source":"e2885d4dc61c91c7.txt","type":"text/plain","size":12},{"uid":"a3e14cb2742d9620","name":"请求头：{}","source":"a3e14cb2742d9620.txt","type":"text/plain","size":12},{"uid":"f2c9d4d85a586e33","name":"测试用例名称：登录成功","source":"f2c9d4d85a586e33.txt","type":"text/plain","size":12},{"uid":"bbe308b8e527aa08","name":"请求参数","source":"bbe308b8e527aa08.txt","type":"text/plain","size":58},{"uid":"9088e3eb7c12fd9c","name":"接口响应信息","source":"9088e3eb7c12fd9c.txt","type":"text/plain","size":675},{"uid":"7f227e425289ffa0","name":"响应文本断言结果：成功","source":"7f227e425289ffa0.txt","type":"text/plain","size":62},{"uid":"fae76b796458234d","name":"响应代码断言结果:成功","source":"fae76b796458234d.txt","type":"text/plain","size":37}],"parameters":[],"attachmentsCount":9,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":true},{"name":"start_test_and_end","time":{"start":1750810827758,"stop":1750810827758,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <testcase.Single.UserManagement.test_user_find.TestUserManager object at 0x000001C35902E090>\nbase_info = {'api_name': '搜索用户', 'header': {'Authorization': '${get_extract_data(token)}', 'Content-Type': 'application/json'}, 'method': 'post', 'url': '/ssm_web/user/findAllUserByPage'}\ntestcase = {'json': {'currentPage': 2, 'pageSize': 10, 'username': '15588886234'}}\n\n    @allure.story(next(c_id) + \"搜索用户\")\n    @pytest.mark.run(order=3)\n    @pytest.mark.parametrize('base_info,testcase', get_testcase_yaml(\"./testcase/Single/UserManagement/user_search_data.yaml\"))\n    def test_search_user(self, base_info, testcase):\n        allure.dynamic.title(testcase['case_name'])\n>       RequestBase().specification_yaml(base_info, testcase)\n\ntestcase\\Single\\UserManagement\\test_user_find.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\apiutil.py:193: in specification_yaml\n    raise e\nbase\\apiutil.py:172: in specification_yaml\n    self.asserts.assert_result(validation, res_json, status_code)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.assertions.Assertions object at 0x000001C35927CE60>\nexpected = [{'contains': {'message': '响应成功'}}, {'eq': {'status_code': 200}}, {'eq': {'success': True}}, {'eq': {'content.pageNum': 2}}, {'eq': {'content.pageSize': 10}}, {'eq': {'content.isFirstPage': False}}, ...]\nresponse = {'content': {'endRow': 0, 'firstPage': 1, 'hasNextPage': False, 'hasPreviousPage': True, ...}, 'message': '响应成功', 'state': 200, 'success': True}\nstatus_code = 200\n\n    def assert_result(self, expected, response, status_code):\n        \"\"\"\n        断言，通过断言all_flag标记，all_flag==0表示测试通过，否则为失败\n        :param expected: 预期结果\n        :param response: 实际响应结果\n        :param status_code: 响应code码\n        :return:\n        \"\"\"\n        all_flag = 0\n        try:\n            logs.info(\"yaml文件预期结果：%s\" % expected)\n            # logs.info(\"实际结果：%s\" % response)\n            # all_flag = 0\n            for yq in expected:\n                for key, value in yq.items():\n                    if key == \"contains\":\n                        flag = self.contains_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == \"eq\":\n                        flag = self.equal_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == 'neq':\n                        flag = self.not_equal_assert(value, response, status_code)\n                        all_flag = all_flag + flag\n                    elif key == 'eq_db':\n                        flag = self.equal_mysql_assert(value)\n                        all_flag = all_flag + flag\n                    else:\n                        logs.error(\"不支持此种断言方式\")\n    \n        except Exception as exceptions:\n            logs.error('接口断言异常，请检查yaml预期结果值是否正确填写!')\n            raise exceptions\n    \n        if all_flag == 0:\n            logs.info(\"测试成功\")\n            assert True\n        else:\n            logs.error(\"测试失败\")\n>           assert False\nE           AssertionError\n\ncommon\\assertions.py:326: AssertionError","steps":[],"attachments":[{"uid":"6df975c0157690a9","name":"接口名称：搜索用户","source":"6df975c0157690a9.txt","type":"text/plain","size":12},{"uid":"708bfe53750fc757","name":"接口地址：http://47.115.225.121:8080/ssm_web/user/findAllUserByPage","source":"708bfe53750fc757.txt","type":"text/plain","size":12},{"uid":"7b5d79d7144bb72e","name":"请求方法：post","source":"7b5d79d7144bb72e.txt","type":"text/plain","size":12},{"uid":"77582fa3b851e395","name":"请求头：{'Content-Type': 'application/json', 'Authorization': '0fdf0718-3e9a-48cc-bfcf-76549278f91f'}","source":"77582fa3b851e395.txt","type":"text/plain","size":12},{"uid":"5db9e8946ab78fad","name":"测试用例名称：5.分页查询-第二页","source":"5db9e8946ab78fad.txt","type":"text/plain","size":12},{"uid":"291e46a1dc52abb","name":"请求参数","source":"291e46a1dc52abb.txt","type":"text/plain","size":71},{"uid":"225bb656fbd4382d","name":"接口响应信息","source":"225bb656fbd4382d.txt","type":"text/plain","size":586},{"uid":"c7e3b584f42ec495","name":"响应文本断言结果：成功","source":"c7e3b584f42ec495.txt","type":"text/plain","size":62},{"uid":"e77fe29e089cacef","name":"响应代码断言结果:成功","source":"e77fe29e089cacef.txt","type":"text/plain","size":37},{"uid":"1a8b356cbadff72e","name":"相等断言结果：成功","source":"1a8b356cbadff72e.txt","type":"text/plain","size":51},{"uid":"9d5d4bef2293626f","name":"相等断言结果：成功","source":"9d5d4bef2293626f.txt","type":"text/plain","size":53},{"uid":"c5e89e07aae49b89","name":"相等断言结果：成功","source":"c5e89e07aae49b89.txt","type":"text/plain","size":56},{"uid":"b6552ebbe6adf78d","name":"相等断言结果：成功","source":"b6552ebbe6adf78d.txt","type":"text/plain","size":65},{"uid":"3798a24eebb54806","name":"相等断言结果：成功","source":"3798a24eebb54806.txt","type":"text/plain","size":67},{"uid":"60f8f854988c0716","name":"相等断言失败","source":"60f8f854988c0716.txt","type":"text/plain","size":50},{"uid":"5dcdf9c78b361a0","name":"log","source":"5dcdf9c78b361a0.txt","type":"text/plain","size":2645}],"parameters":[],"attachmentsCount":16,"shouldDisplayMessage":true,"attachmentStep":false,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"start_test_and_end::0","time":{"start":1750810828058,"stop":1750810828058,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"setup_fixture::0","time":{"start":1750810846938,"stop":1750810846938,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"M06_用户管理"},{"name":"story","value":"C08_搜索用户"},{"name":"tag","value":"run(order=3)"},{"name":"tag","value":"api_single"},{"name":"tag","value":"user_management"},{"name":"parentSuite","value":"testcase.Single.UserManagement"},{"name":"suite","value":"test_user_find"},{"name":"subSuite","value":"TestUserManager"},{"name":"host","value":"SQG"},{"name":"thread","value":"19160-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.Single.UserManagement.test_user_find"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_info","value":"{'api_name': '搜索用户', 'url': '/ssm_web/user/findAllUserByPage', 'method': 'post', 'header': {'Content-Type': 'application/json', 'Authorization': '${get_extract_data(token)}'}}"},{"name":"testcase","value":"{'case_name': '5.分页查询-第二页', 'json': {'currentPage': 2, 'pageSize': 10, 'username': '15588886234'}, 'validation': [{'contains': {'message': '响应成功'}}, {'eq': {'status_code': 200}}, {'eq': {'success': True}}, {'eq': {'content.pageNum': 2}}, {'eq': {'content.pageSize': 10}}, {'eq': {'content.isFirstPage': False}}, {'eq': {'content.hasPreviousPage': True}}, {'eq': {'content.list[0].name': '15588886234'}}]}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["run(order=3)","api_single","user_management"]},"source":"e0b2a3287cadbeb2.json","parameterValues":["{'api_name': '搜索用户', 'url': '/ssm_web/user/findAllUserByPage', 'method': 'post', 'header': {'Content-Type': 'application/json', 'Authorization': '${get_extract_data(token)}'}}","{'case_name': '5.分页查询-第二页', 'json': {'currentPage': 2, 'pageSize': 10, 'username': '15588886234'}, 'validation': [{'contains': {'message': '响应成功'}}, {'eq': {'status_code': 200}}, {'eq': {'success': True}}, {'eq': {'content.pageNum': 2}}, {'eq': {'content.pageSize': 10}}, {'eq': {'content.isFirstPage': False}}, {'eq': {'content.hasPreviousPage': True}}, {'eq': {'content.list[0].name': '15588886234'}}]}"]}