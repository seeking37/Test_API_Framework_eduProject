{"name": "查询用户权限-缺少Authorization", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n..\\..\\Pyproject\\testProject\\venv\\Lib\\site-packages\\requests\\models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\seeki\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Users\\seeki\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000248B5D953D0>\ns = '<!doctype html><html lang=\"en\"><head><title>HTTP Status 500 – Internal Server Error</title><style type=\"text/css\">bod...e of the root cause is available in the server logs.</p><hr class=\"line\" /><h3>Apache Tomcat/8.5.63</h3></body></html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\seeki\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_user_permissions.TestUserManager object at 0x00000248EB31C890>\ncase_info = {'baseInfo': {'api_name': '查询用户权限-缺少Authorization', 'description': '测试缺少Authorization头', 'header': {'Content-Type': 'application/json', 'Cookie': '${get_extract_data(cookie_1)}'}, 'method': 'get', ...}, 'testCase': [{'json': {}}]}\n\n    @allure.story(next(c_id) + \"查询用户权限\")\n    # @pytest.mark.run(order=1)\n    @pytest.mark.parametrize('case_info', get_testcase_yaml(\"./testcase/Business Scenario/user_permissions_data.yaml\"))\n    def test_user_permissions(self, case_info):\n        allure.dynamic.title(case_info['baseInfo']['api_name'])\n>       RequestBase().specification_yaml(case_info)\n\ntestcase\\Business Scenario\\test_user_permissions.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\apiutil_business.py:150: in specification_yaml\n    raise e\nbase\\apiutil_business.py:124: in specification_yaml\n    allure.attach(self.allure_attach_response(res.json()), '接口响应信息', allure.attachment_type.TEXT)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\Pyproject\\testProject\\venv\\Lib\\site-packages\\requests\\models.py:978: JSONDecodeError"}, "attachments": [{"name": "接口地址：http://47.113.145.175:8080/ssm_web/user/getUserPermissions", "source": "59fb7061-05af-44ba-af3e-0e13850eee27-attachment.attach"}, {"name": "接口名：查询用户权限-缺少Authorization", "source": "7e5ef7f5-3a7b-4170-9fab-1a01cd34b1f1-attachment.attach"}, {"name": "请求方法：get", "source": "ab33be43-b298-45a5-9954-e611163e40b8-attachment.attach"}, {"name": "请求头：{'Content-Type': 'application/json', 'Cookie': 'JSESSIONID=DD3FF136EA1AAA670576C4A78F1DA8A7'}", "source": "d5551c80-eb26-4db1-95f8-3df0e27f4809-attachment.txt", "type": "text/plain"}, {"name": "请求头信息", "source": "62322abf-2355-47dd-861c-4f7c2f1b1f8e-attachment.txt", "type": "text/plain"}, {"name": "测试用例名称：5.测试缺少Authorization头", "source": "88371570-d68e-4999-bd83-5111c552fbb0-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "24871cd8-cb87-415e-8c1e-22751621ac06-attachment.txt", "type": "text/plain"}, {"name": "接口响应信息", "source": "00a4d0cd-8f39-4b20-a2ff-7c3b40df6f0b-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "36316f5b-8e70-4cec-acea-453fca48cf96-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_info", "value": "{'baseInfo': {'description': '测试缺少Authorization头', 'api_name': '查询用户权限-缺少Authorization', 'url': '/ssm_web/user/getUserPermissions', 'method': 'get', 'header': {'Content-Type': 'application/json', 'Cookie': '${get_extract_data(cookie_1)}'}}, 'testCase': [{'case_name': '5.测试缺少Authorization头', 'json': {}, 'validation': [{'contains': {'state': 400}}, {'contains': {'success': False}}, {'contains': {'message': '获取失败'}}]}]}"}], "start": 1749917015345, "stop": 1749917015473, "uuid": "515bbf2a-91e6-4292-8f4e-d6953849ff40", "historyId": "207c4599c7799df01061bd211c3aa688", "testCaseId": "c79c6433229e734fca7ed02fdc44acaa", "fullName": "testcase.Business Scenario.test_user_permissions.TestUserManager#test_user_permissions", "labels": [{"name": "feature", "value": "M02_用户管理"}, {"name": "story", "value": "C02_查询用户权限"}, {"name": "parentSuite", "value": "testcase.Business Scenario"}, {"name": "suite", "value": "test_user_permissions"}, {"name": "subSuite", "value": "TestUserManager"}, {"name": "host", "value": "SQG"}, {"name": "thread", "value": "16436-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.Business Scenario.test_user_permissions"}]}