---
description: 
globs: 
alwaysApply: false
---
# 接口测试用例常见模式和最佳实践

本规则补充了根据接口文档生成YAML测试用例时的常见模式和最佳实践。参考项目中的断言工具 [common/assertions.py](mdc:common/assertions.py) 和请求工具 [common/sendrequest.py](mdc:common/sendrequest.py)。

## 常见接口测试场景模式

### 1. 用户认证接口
适用于：登录、注册、退出等认证相关接口

```yaml
- baseInfo:
    api_name: 用户登录
    url: /api/auth/login
    method: POST
    header:
      Content-Type: application/json
  testCase:
  - case_name: 正常登录
    json:
      username: testuser
      password: password123
    validation:
    - eq: {status_code: 200}
    - contains: {message: "登录成功"}
    - exists: {data.token}            # 验证token字段存在
    extract:
      token: '$.data.token'
      user_id: '$.data.user.id'
      
  - case_name: 用户名错误
    json:
      username: wronguser
      password: password123
    validation:
    - eq: {status_code: 401}
    - contains: {message: "用户名或密码错误"}
    
  - case_name: 密码错误
    json:
      username: testuser
      password: wrongpass
    validation:
    - eq: {status_code: 401}
    - contains: {message: "用户名或密码错误"}
    
  - case_name: 参数为空
    json:
      username: ""
      password: ""
    validation:
    - eq: {status_code: 400}
    - contains: {message: "参数不能为空"}
```

### 2. CRUD操作接口模式

#### 查询接口
```yaml
- baseInfo:
    api_name: 查询用户列表
    url: /api/users
    method: GET
    header:
      Authorization: Bearer ${get_extract_data(token)}
  testCase:
  - case_name: 查询成功
    params:
      page: 1
      size: 10
    validation:
    - eq: {status_code: 200}
    - type: {data: list}              # 验证data是列表类型
    - gte: {data.length: 0}           # 验证列表长度
    extract_list:
      user_ids: '$.data[*].id'
```

#### 新增接口
```yaml
- baseInfo:
    api_name: 新增用户
    url: /api/users
    method: POST
    header:
      Authorization: Bearer ${get_extract_data(token)}
      Content-Type: application/json
  testCase:
  - case_name: 新增成功
    json:
      name: "测试用户"
      email: "test@example.com"
      phone: "13800138000"
    validation:
    - eq: {status_code: 201}
    - contains: {message: "创建成功"}
    - eq_db: 
        "SELECT name FROM users WHERE email='test@example.com'": "测试用户"
    extract:
      new_user_id: '$.data.id'
```

#### 更新接口
```yaml
- baseInfo:
    api_name: 更新用户
    url: /api/users/${get_extract_data(new_user_id)}
    method: PUT
    header:
      Authorization: Bearer ${get_extract_data(token)}
      Content-Type: application/json
  testCase:
  - case_name: 更新成功
    json:
      name: "更新后的用户名"
      email: "updated@example.com"
    validation:
    - eq: {status_code: 200}
    - contains: {message: "更新成功"}
    - eq_db:
        "SELECT name FROM users WHERE id=${get_extract_data(new_user_id)}": "更新后的用户名"
```

#### 删除接口
```yaml
- baseInfo:
    api_name: 删除用户
    url: /api/users/${get_extract_data(new_user_id)}
    method: DELETE
    header:
      Authorization: Bearer ${get_extract_data(token)}
  testCase:
  - case_name: 删除成功
    validation:
    - eq: {status_code: 200}
    - contains: {message: "删除成功"}
    - eq_db:
        "SELECT COUNT(*) FROM users WHERE id=${get_extract_data(new_user_id)}": 0
```

### 3. 文件上传接口
```yaml
- baseInfo:
    api_name: 文件上传
    url: /api/upload
    method: POST
    header:
      Authorization: Bearer ${get_extract_data(token)}
  testCase:
  - case_name: 上传成功
    files:
      file: ./test.jpg                # 相对路径到测试文件（建议与测试代码同目录）
    validation:
    - eq: {status_code: 200}
    - contains: {message: "上传成功"}
    - exists: {data.file_url}
    extract:
      file_url: '$.data.file_url'
```

### 4. 权限验证接口
参考 [testcase/Business Scenario/user_permissions_data.yaml](mdc:testcase/Business Scenario/user_permissions_data.yaml)

```yaml
- baseInfo:
    api_name: 管理员操作
    url: /api/admin/users
    method: GET
    header:
      Authorization: Bearer ${get_extract_data(admin_token)}
  testCase:
  - case_name: 管理员访问成功
    validation:
    - eq: {status_code: 200}
    
  - case_name: 普通用户访问被拒绝
    header:
      Authorization: Bearer ${get_extract_data(user_token)}
    validation:
    - eq: {status_code: 403}
    - contains: {message: "权限不足"}
```

## 断言验证最佳实践

### 1. 基础响应验证
```yaml
validation:
- eq: {status_code: 200}              # 状态码验证（必需）
- exists: {data}                      # 验证字段存在
- type: {data: object}                # 验证数据类型
- not_empty: {data}                   # 验证非空
```

### 2. 内容验证
```yaml
validation:
- contains: {message: "操作成功"}       # 包含特定文本
- not_contains: {message: "错误"}      # 不包含错误信息
- eq: {data.status: "active"}         # 特定字段值验证
- in: {data.type: ["A", "B", "C"]}    # 值在指定范围内
```

### 3. 数值验证
```yaml
validation:
- gt: {data.count: 0}                 # 大于
- gte: {data.total: 10}               # 大于等于
- lt: {data.page: 100}                # 小于
- lte: {data.size: 50}                # 小于等于
- between: {data.score: [0, 100]}     # 范围验证
```

### 4. 数据库验证
```yaml
validation:
- eq_db:                              # 数据库查询结果验证
    "SELECT status FROM orders WHERE id=${get_extract_data(order_id)}": "completed"
- contains_db:                        # 数据库包含验证
    "SELECT description FROM products WHERE name='test'": "测试产品"
```

## 数据提取和关联模式

### 1. 基础数据提取
```yaml
extract:
  # JSONPath方式
  user_id: '$.data.user.id'
  token: '$.access_token'
  
  # 正则表达式方式
  session_id: '"session_id":"(.+?)"'
  
  # Cookie提取
  csrf_token: 'cookies:csrf_token'
```

### 2. 列表数据提取
```yaml
extract_list:
  all_ids: '$.data[*].id'             # 提取所有ID
  product_names: '$.products[*].name'  # 提取所有产品名
```

### 3. 复杂数据提取
```yaml
extract:
  # 嵌套对象提取
  address_id: '$.user.profile.address.id'
  
  # 数组中特定元素
  first_order_id: '$.orders[0].id'
  
  # 条件提取（需要自定义函数）
  active_user_count: '${count_active_users()}'
```

## 错误处理和边界测试

### 1. 参数验证测试
```yaml
testCase:
- case_name: 必填参数为空
  json: {}
  validation:
  - eq: {status_code: 400}
  - contains: {message: "参数不能为空"}

- case_name: 参数类型错误
  json:
    age: "not_a_number"
  validation:
  - eq: {status_code: 400}
  - contains: {message: "参数类型错误"}

- case_name: 参数长度超限
  json:
    name: "${'x' * 1000}"             # 生成长字符串
  validation:
  - eq: {status_code: 400}
  - contains: {message: "参数长度超限"}
```

### 2. 业务逻辑测试
```yaml
testCase:
- case_name: 重复操作
  json:
    email: "duplicate@example.com"
  validation:
  - eq: {status_code: 400}
  - contains: {message: "邮箱已存在"}

- case_name: 资源不存在
  json:
    user_id: 999999
  validation:
  - eq: {status_code: 404}
  - contains: {message: "用户不存在"}
```

## 性能和并发测试标记

### 1. 性能测试标记
```yaml
- baseInfo:
    api_name: 高并发接口
    url: /api/high-traffic
    method: GET
    # 性能测试标记
    performance_test: true
    concurrent_users: 100
    duration: 60
```

### 2. 压力测试数据
```yaml
testCase:
- case_name: 大数据量测试
  json:
    data: ${generate_large_data(10000)}  # 生成大量测试数据
  validation:
  - eq: {status_code: 200}
  - lt: {response_time: 5000}          # 响应时间验证
```

## 文件组织规范

### 单接口测试用例文件组织
以UserManagement模块为例：
```
testcase/Single/UserManagement/
├── test_user_login.py              # 用户登录测试代码
├── user_login_data.yaml            # 用户登录测试数据
├── test_user_find.py               # 用户查询测试代码
├── user_find_data.yaml             # 用户查询测试数据
├── test_user_search.py             # 用户搜索测试代码
└── user_search_data.yaml           # 用户搜索测试数据
```

### 业务场景测试用例文件组织
```
testcase/Business Scenario/
├── test_course_scenario.py         # 课程管理业务场景测试代码
├── course_scenario.yml             # 课程管理业务场景测试数据
├── test_user_permissions.py        # 用户权限业务场景测试代码
└── user_permissions_data.yaml      # 用户权限业务场景测试数据
```

### 文件组织原则
1. **就近原则**: 测试数据文件与测试代码文件存放在同一目录下
2. **命名一致**: 测试数据文件名与测试代码文件名保持对应关系
3. **功能分组**: 按功能模块分别创建目录，便于管理和维护
4. **共享数据**: 只有真正需要跨模块共享的数据才放在公共data目录中

遵循这些模式和文件组织规范可以确保测试用例覆盖全面，验证充分，并与项目框架完美配合。




